name: Build TinyTeX-mmCEsim

on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows
            os: windows-latest
            architecture: x86_64
            url: https://yihui.org/tinytex/TinyTeX-1.zip
            file: TinyTeX-1.zip
            artifact: TinyTeX-mmCEsim-Windows.zip
            texlive_prefix: win32
          - name: Linux
            os: ubuntu-latest
            architecture: x86_64
            url: https://yihui.org/tinytex/TinyTeX-1.tar.gz
            file: TinyTeX-1.tar.gz
            artifact: TinyTeX-mmCEsim-Linux.zip
            texlive_prefix: x86_64-linux
          - name: macOS
            os: macos-latest
            architecture: arm
            url: https://yihui.org/tinytex/TinyTeX-1.tgz
            file: TinyTeX-1.tgz
            artifact: TinyTeX-mmCEsim-macOS.zip
            texlive_prefix: universal-darwin

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive

    - name: Get TinyTeX
      run: |
        wget ${{ matrix.config.url }}
        tar -xf ${{ matrix.config.file }}
        echo "${GITHUB_WORKSPACE}/TinyTeX/bin/universal-darwin" >> $GITHUB_PATH

    - name: Install Packages
      run: sh ${GITHUB_WORKSPACE}/install_pkg.sh

    - name: Test
      run: |
        cd test
        latexmk -pdfxe test.tex

    - name: Pack
      run: zip -r ${{ matrix.config.artifact }} TinyTeX

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Automatic build for **TinyTeX-mmCEsim**,
          used for [mmCEsim](https://mmcesim.org).
          Installed packages are listed in
          [`install_pkg.sh`](https://github.com/mmcesim/tinytex-mmcesim/blob/master/install_pkg.sh).
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows
            os: windows-latest
            architecture: x86_64
            artifact: TinyTeX-mmCEsim-Windows.zip
          - name: Linux
            os: ubuntu-latest
            architecture: x86_64
            artifact: TinyTeX-mmCEsim-Linux.zip
          - name: macOS
            os: macos-latest
            artifact: TinyTeX-mmCEsim-macOS.zip
    needs: release

    steps:
    - name: TinyTeX-mmCEsim
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      shell: bash
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar
